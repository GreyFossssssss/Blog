(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{431:function(v,_,t){"use strict";t.r(_);var a=t(2),i=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),_("p",[v._v("在 "),_("strong",[v._v("JavaScript")]),v._v(" 中，我们可以分成两种类型：")]),v._v(" "),_("ul",[_("li",[v._v("基本类型")]),v._v(" "),_("li",[v._v("引用类型")])]),v._v(" "),_("h2",{attrs:{id:"基本类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[v._v("#")]),v._v(" 基本类型")]),v._v(" "),_("p",[v._v("基本类型主要分为以下几种：")]),v._v(" "),_("ul",[_("li",[v._v("Number 类型")]),v._v(" "),_("li",[v._v("String 类型")]),v._v(" "),_("li",[v._v("Nulll")]),v._v(" "),_("li",[v._v("Undefined")]),v._v(" "),_("li",[v._v("Boolean")]),v._v(" "),_("li",[v._v("Symbol : 用于表示唯一的、不可变的值，通常用于对象属性的唯一标识符")]),v._v(" "),_("li",[v._v("Bigint: 用于表示任意精度整数，超出普通 Number 类型范围的整数。需要在整数值后面加上 n 或 N 后缀，例如：12345678901234567890n。")])]),v._v(" "),_("h2",{attrs:{id:"引用类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[v._v("#")]),v._v(" 引用类型")]),v._v(" "),_("p",[v._v("主要的引用类型主要分为：")]),v._v(" "),_("ul",[_("li",[v._v("数组 Array")]),v._v(" "),_("li",[v._v("对象 Object")]),v._v(" "),_("li",[v._v("Function")]),v._v(" "),_("li",[v._v("其他类型 Date RegExp map set 等")])]),v._v(" "),_("h2",{attrs:{id:"存储区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#存储区别"}},[v._v("#")]),v._v(" 存储区别")]),v._v(" "),_("p",[v._v("基本数据类型跟引用数据类型在内存中的存储位置不同：")]),v._v(" "),_("ul",[_("li",[v._v("基本数据类型，在内存中存在栈内存中")]),v._v(" "),_("li",[v._v("引用数据类型，在内存中存在堆内存中，在栈中存放的是对应堆内存的地址")])]),v._v(" "),_("h2",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("声明变量时不同的内存地址分配：")]),v._v(" "),_("ul",[_("li",[v._v("简单类型的值存放在栈中，在栈中存放的是对应的值")]),v._v(" "),_("li",[v._v("引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址")])])]),v._v(" "),_("li",[_("p",[v._v("不同的类型数据导致赋值变量时的不同：")]),v._v(" "),_("ul",[_("li",[v._v("简单类型赋值，是生成相同的值，两个对象对应不同的地址")]),v._v(" "),_("li",[v._v("复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象")])])])]),v._v(" "),_("p",[v._v("Q:为什么基本数据类型要放在栈内存，而引用数据类型存放在堆内存，为什么要这么设计？")]),v._v(" "),_("p",[v._v("A：在 JavaScript 中，基本数据类型和引用数据类型之所以被存储在不同的内存位置，是由于 JavaScript 的内存管理和数据传递方式的设计考虑所导致的。")]),v._v(" "),_("p",[_("strong",[v._v("基本数据类型（Primitive Data Types）")]),v._v("：\n基本数据类型包括 Number、String、Boolean、Null、Undefined 和 Symbol。它们的值是固定大小的，可以直接存储在栈内存中。栈内存是一种快速的存储区域，它的内存分配和释放速度非常快，但是大小有限。")]),v._v(" "),_("p",[v._v("在栈内存中，基本数据类型的值可以直接访问，当这些数据被赋值给变量或传递给函数时，实际上是将值本身复制给了目标变量或函数参数。因为它们的大小是固定的，所以复制值的操作是简单高效的。")]),v._v(" "),_("p",[_("strong",[v._v("引用数据类型（Reference Data Types）")]),v._v("：\n引用数据类型包括 Object、Array、Function 等。它们的值大小不固定，可能会比较大，因此不能直接存储在栈内存中。相反，它们存储在堆内存中。")]),v._v(" "),_("p",[v._v("堆内存是一种较大的存储区域，用于存储复杂的数据结构。当我们创建一个引用数据类型时，JavaScript 会在堆内存中分配内存空间来存储该数据结构，并将其在栈内存中的引用地址（或称为指针）存储在相应的变量中。")]),v._v(" "),_("p",[v._v("当引用数据类型被赋值给其他变量或作为参数传递给函数时，实际上只是复制了该变量在栈内存中的引用地址，而不是复制整个数据结构。这种复制操作是快速的，因为只是复制了一个引用地址，而不是复制整个数据结构。")]),v._v(" "),_("p",[v._v("这种设计带来了以下优势：")]),v._v(" "),_("ol",[_("li",[v._v("空间效率：基本数据类型的值直接存储在栈内存中，复制和访问操作非常快速。而引用数据类型的值存储在堆内存中，可以存储大型数据结构，避免栈溢出的问题。")]),v._v(" "),_("li",[v._v("复制效率：基本数据类型复制的是值本身，不涉及引用地址，而引用数据类型复制的是引用地址，避免了复制大型数据结构的开销。")]),v._v(" "),_("li",[v._v("数据传递：当将引用数据类型作为参数传递给函数时，实际上传递的是引用地址，函数内部可以直接操作数据，避免了数据复制和传递的开销。")])]),v._v(" "),_("p",[v._v("总结：基本数据类型放在栈内存中，可以快速访问和复制其值；引用数据类型放在堆内存中，可以存储复杂的数据结构，并使用引用地址来访问和复制数据，提高空间效率和复制效率。这样的设计在 JavaScript 中提供了灵活性和效率。")])])}),[],!1,null,null,null);_.default=i.exports}}]);